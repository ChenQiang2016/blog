<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blog.dao.ArticleDao">
  <resultMap id="BaseResultMap" type="com.blog.model.Article">
    <id column="article_id" jdbcType="INTEGER" property="articleId" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="publish_date" jdbcType="VARCHAR" property="publishDate" />
    <result column="support" jdbcType="INTEGER" property="support" />
    <result column="comment" jdbcType="INTEGER" property="comment" />
    <result column="label" jdbcType="VARCHAR" property="label" />
    <result column="sort" jdbcType="INTEGER" property="sort" />
    <result column="ctime" jdbcType="TIMESTAMP" property="ctime" />
    <result column="state" jdbcType="CHAR" property="state" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.blog.model.Article">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    article_id, title, publish_date, support, comment, label, sort, ctime, state
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.blog.model.ArticleExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="page != null">
      limit #{page.limitStart} , #{page.pageSize}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.blog.model.ArticleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="page != null">
      limit #{page.limitStart} , #{page.pageSize}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from article
    where article_id = #{articleId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from article
    where article_id = #{articleId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.blog.model.ArticleExample">
    delete from article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.blog.model.Article">
    insert into article (article_id, title, publish_date, 
      support, comment, label, 
      sort, ctime, state, 
      content)
    values (#{articleId,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{publishDate,jdbcType=VARCHAR}, 
      #{support,jdbcType=INTEGER}, #{comment,jdbcType=INTEGER}, #{label,jdbcType=VARCHAR}, 
      #{sort,jdbcType=INTEGER}, #{ctime,jdbcType=TIMESTAMP}, #{state,jdbcType=CHAR}, 
      #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.blog.model.Article">
    insert into article
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="articleId != null">
        article_id,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="publishDate != null">
        publish_date,
      </if>
      <if test="support != null">
        support,
      </if>
      <if test="comment != null">
        comment,
      </if>
      <if test="label != null">
        label,
      </if>
      <if test="sort != null">
        sort,
      </if>
      <if test="ctime != null">
        ctime,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="articleId != null">
        #{articleId,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="publishDate != null">
        #{publishDate,jdbcType=VARCHAR},
      </if>
      <if test="support != null">
        #{support,jdbcType=INTEGER},
      </if>
      <if test="comment != null">
        #{comment,jdbcType=INTEGER},
      </if>
      <if test="label != null">
        #{label,jdbcType=VARCHAR},
      </if>
      <if test="sort != null">
        #{sort,jdbcType=INTEGER},
      </if>
      <if test="ctime != null">
        #{ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null">
        #{state,jdbcType=CHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.blog.model.ArticleExample" resultType="java.lang.Long">
    select count(*) from article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update article
    <set>
      <if test="record.articleId != null">
        article_id = #{record.articleId,jdbcType=INTEGER},
      </if>
      <if test="record.title != null">
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.publishDate != null">
        publish_date = #{record.publishDate,jdbcType=VARCHAR},
      </if>
      <if test="record.support != null">
        support = #{record.support,jdbcType=INTEGER},
      </if>
      <if test="record.comment != null">
        comment = #{record.comment,jdbcType=INTEGER},
      </if>
      <if test="record.label != null">
        label = #{record.label,jdbcType=VARCHAR},
      </if>
      <if test="record.sort != null">
        sort = #{record.sort,jdbcType=INTEGER},
      </if>
      <if test="record.ctime != null">
        ctime = #{record.ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=CHAR},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update article
    set article_id = #{record.articleId,jdbcType=INTEGER},
      title = #{record.title,jdbcType=VARCHAR},
      publish_date = #{record.publishDate,jdbcType=VARCHAR},
      support = #{record.support,jdbcType=INTEGER},
      comment = #{record.comment,jdbcType=INTEGER},
      label = #{record.label,jdbcType=VARCHAR},
      sort = #{record.sort,jdbcType=INTEGER},
      ctime = #{record.ctime,jdbcType=TIMESTAMP},
      state = #{record.state,jdbcType=CHAR},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update article
    set article_id = #{record.articleId,jdbcType=INTEGER},
      title = #{record.title,jdbcType=VARCHAR},
      publish_date = #{record.publishDate,jdbcType=VARCHAR},
      support = #{record.support,jdbcType=INTEGER},
      comment = #{record.comment,jdbcType=INTEGER},
      label = #{record.label,jdbcType=VARCHAR},
      sort = #{record.sort,jdbcType=INTEGER},
      ctime = #{record.ctime,jdbcType=TIMESTAMP},
      state = #{record.state,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.blog.model.Article">
    update article
    <set>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="publishDate != null">
        publish_date = #{publishDate,jdbcType=VARCHAR},
      </if>
      <if test="support != null">
        support = #{support,jdbcType=INTEGER},
      </if>
      <if test="comment != null">
        comment = #{comment,jdbcType=INTEGER},
      </if>
      <if test="label != null">
        label = #{label,jdbcType=VARCHAR},
      </if>
      <if test="sort != null">
        sort = #{sort,jdbcType=INTEGER},
      </if>
      <if test="ctime != null">
        ctime = #{ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=CHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where article_id = #{articleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.blog.model.Article">
    update article
    set title = #{title,jdbcType=VARCHAR},
      publish_date = #{publishDate,jdbcType=VARCHAR},
      support = #{support,jdbcType=INTEGER},
      comment = #{comment,jdbcType=INTEGER},
      label = #{label,jdbcType=VARCHAR},
      sort = #{sort,jdbcType=INTEGER},
      ctime = #{ctime,jdbcType=TIMESTAMP},
      state = #{state,jdbcType=CHAR},
      content = #{content,jdbcType=LONGVARCHAR}
    where article_id = #{articleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.blog.model.Article">
    update article
    set title = #{title,jdbcType=VARCHAR},
      publish_date = #{publishDate,jdbcType=VARCHAR},
      support = #{support,jdbcType=INTEGER},
      comment = #{comment,jdbcType=INTEGER},
      label = #{label,jdbcType=VARCHAR},
      sort = #{sort,jdbcType=INTEGER},
      ctime = #{ctime,jdbcType=TIMESTAMP},
      state = #{state,jdbcType=CHAR}
    where article_id = #{articleId,jdbcType=INTEGER}
  </update>
  <sql id="sql_where">
    <if test="title != null and '' != title">
       and title = #{title,jdbcType=VARCHAR}
    </if>
    <if test="publishDate != null and '' != publishDate">
       and publish_date = #{publishDate,jdbcType=VARCHAR}
    </if>
    <if test="support != null and '' != support">
       and support = #{support,jdbcType=INTEGER}
    </if>
    <if test="comment != null and '' != comment">
       and comment = #{comment,jdbcType=INTEGER}
    </if>
    <if test="label != null and '' != label">
       and label = #{label,jdbcType=VARCHAR}
    </if>
    <if test="sort != null and '' != sort">
       and sort = #{sort,jdbcType=INTEGER}
    </if>
    <if test="ctime != null and '' != ctime">
       and ctime = #{ctime,jdbcType=TIMESTAMP}
    </if>
    <if test="state != null and '' != state">
       and state = #{state,jdbcType=CHAR}
    </if>
    <if test="content != null and '' != content">
       and content = #{content,jdbcType=LONGVARCHAR}
    </if>
  </sql>
  <select id="countPageByMap" parameterType="java.util.Map" resultType="java.lang.Long">
    select count(*) from article
    <where>
      <include refid="sql_where" />
    </where>
  </select>
  <select id="selectPageByMap" parameterType="java.util.Map" resultMap="BaseResultMap">
     select
    <include refid="Base_Column_List" />
     from article
    <where>
      <include refid="sql_where" />
    </where>
    <if test="limitStart != null and pageSize > 0">
      limit #{limitStart} , #{pageSize}
    </if>
  </select>
</mapper>